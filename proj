   #include "mpi.h"
   #include <stdio.h>
   #include <string.h>
   #include <stdlib.h>
   #define LEFT  0
   #define RIGHT 1

void tab1(int ma, double inbuf[][ma]);
void tab12(int ma, int na, double inbuf[][ma][na]);
void metodaGaussSeid(int ma, int na, double A[ma][na], double U[ma][na], double L[ma][na], double b[]);
void liczGaussSeid(int ma, int na, double U[ma][na], double L[ma][na], double b[], double C[]);
void mJacobiego(int ma, int na, double A[ma][na], double M[ma][na], double *N);
void liczJacobi(int ma, int na, double M[ma][na], double *N, double b[], double C[]);
void print_matrix(int ma, int na, double A[ma][na]);
void print_matrix2(int ma, double A[]);

void  main(int argc, char *argv[])  {
	int ma, mb, na, nb, i, j;
    double x;
	char *funkcja;

	FILE *fpa = fopen("A", "r");
	FILE *fpb = fopen("b", "r");
	if( fpa == NULL || fpb == NULL ){
		perror("blad otwarcia pliku");
		exit(-10);
	}
	fscanf (fpa, "%d", &ma);
	fscanf (fpa, "%d", &na);
	fscanf (fpb, "%d", &mb);
	fscanf (fpb, "%d", &nb);

	double A[ma][na];
	double b[mb];
	double C[ma];
	double D[ma];
	double U[ma][na];
	double L[ma][na];
	double *N = malloc(ma*sizeof(double)+1);

	double outbuf1[ma], outbuf2[ma][ma], outbuf3[ma], outbuf4[ma][na], outbuf5[ma],
    inbuf1[2][ma], inbuf2[2][ma][na], inbuf3[2][ma], inbuf4[2][ma][ma], inbuf5[2][ma];
	int numtasks, rank, source, dest,
    tag[4]={0,1,2,3},
    nbrs[2],
    periods[1]={0},
    reorder=0,
    coords[1];
	int tag1=1;
	tab1(ma, inbuf1);
	tab12(ma, na, inbuf2);
	tab1(ma, inbuf3);
	tab12(ma, na, inbuf4);
	tab1(ma, inbuf5);
	tab1(ma, inbuf1);
   	MPI_Init(&argc,&argv);
   	MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
   	int dims[1]={numtasks};
   	MPI_Comm cartcomm;
	funkcja = argv[1];
	if (numtasks > 0) {
      	MPI_Cart_create(MPI_COMM_WORLD, 1, dims, periods, reorder, &cartcomm);
      	MPI_Comm_rank(cartcomm, &rank);
      	MPI_Cart_coords(cartcomm, rank, 2, coords);
      	MPI_Cart_shift(cartcomm, 0, 1, &nbrs[LEFT], &nbrs[RIGHT]);

		if (argc < 2){
			if(rank==0){
                    printf("\nJaka metoda 1 czy 2?\n\n");
			}
			exit(1);
		}

		//wczytytwanie macierzy b
		for(i =0; i< mb; i++){
			fscanf( fpb, "%lf", &x );
			b[i] = x;
		}

		if(rank==0){
			//sprawdzenie argumentow
			if ((strcmp(funkcja, "jacobi")!=0) && (strcmp(funkcja, "gauss")!=0)){
				if(rank==0){
					printf("\n Jesli wybierasz metode gauss'a wpisz gauss , jesli wybieraesz metode jacobiego wpisz jacobi\n\n");
				}
				exit(1);
			}
			if ((ma != na) || (ma!= mb)){
				if(rank==0){
					printf("\nNieprawidlowe rozmiary m1cierzy\n\n", m1, n1, m2);
				}
				exit(1);
			}

			//macierz A
			for(i =0; i< ma; i++) {
				for(j = 0; j<na; j++){
					fscanf( fpa, "%lf", &x );
					A[i][j] = x;
					if (i == j){
						if(A[i][j] == 0){
							printf("\n Error \n");
							exit(1);
						}
					}
				}
			}

			//inicjacja metody Jacobiego
			if (strcmp(funkcja, "jacobi")==0){
				printf("Mtoda Jacobiego.\n");
				mJacobi(ma, na, A, U, N);
			}
			//inicjacja metody G-S
			if (strcmp(funkcja, "gauss")==0){
				printf("Metoda Gaussa-Seidla.\n");
				metodaGaussSeid(ma, na, A, U, L, b);
			}

			//wydruk danych
			printf("Macierz wspolczynnikow A:\n");
			print_matrix(ma, na, A);
			printf("macierz wyrazow wolnych b:\n");
			print_matrix2(mb, b);
			printf("\n");
			printf("Wysylanie poprzez %d procesy\n\n", numtasks);
		}

			for (i=0; i<2; i++) {
				if (rank==0){
					memcpy(outbuf1, C, ma * sizeof(double));
					memcpy(outbuf2, U, ma * na *sizeof(double));
					if (strcmp(funkcja, "jacobi")==0){
						memcpy(outbuf3, N, ma * sizeof(double));
					}else if (strcmp(funkcja, "gauss")==0){
						memcpy(outbuf4, L, ma * ma * sizeof(double));
						memcpy(outbuf5, b, ma * sizeof(double));
					}
				}else{
					memcpy(outbuf1, inbuf1[LEFT], ma * sizeof(double));			//C
					memcpy(outbuf2, inbuf2[LEFT], ma * na* sizeof(double));		//U
					if (strcmp(funkcja, "jacobi")==0){
						memcpy(outbuf3, inbuf3[LEFT], ma * sizeof(double));		//N
					}else if (strcmp(funkcja, "gauss")==0){
						memcpy(outbuf4, inbuf4[LEFT], ma * na * sizeof(double));//L
						memcpy(outbuf5, inbuf5[LEFT], ma * sizeof(double));		//b
					}
				}
         		dest = nbrs[i];
         		source = nbrs[i];
				if (i==1){ //w prawo - wysylamy
         			MPI_Send(&outbuf1, ma, MPI_DOUBLE, dest, tag[0], MPI_COMM_WORLD); //C
					MPI_Send(&outbuf2, ma*na, MPI_DOUBLE, dest, tag[1], MPI_COMM_WORLD); //U
					if (strcmp(funkcja, "jacobi")==0){
						MPI_Send(&outbuf3, ma, MPI_DOUBLE, dest, tag[2], MPI_COMM_WORLD); //N
					}else if (strcmp(funkcja, "gauss")==0){
						MPI_Send(&outbuf4, ma*na, MPI_DOUBLE, dest, tag[2], MPI_COMM_WORLD); //L
						MPI_Send(&outbuf5, ma, MPI_DOUBLE, dest, tag[3], MPI_COMM_WORLD); //b
					}
         		}
				if (i==0){ //w lewo - odbieramy
         			MPI_Recv(&inbuf1[i], ma, MPI_DOUBLE, source, tag[0], MPI_COMM_WORLD, MPI_STATUS_IGNORE);  //C
					MPI_Recv(&inbuf2[i], ma * na, MPI_DOUBLE, source, tag[1], MPI_COMM_WORLD, MPI_STATUS_IGNORE);  //U
					if (strcmp(funkcja, "jacobi")==0){
						MPI_Recv(&inbuf3[i], ma, MPI_DOUBLE, source, tag[2], MPI_COMM_WORLD, MPI_STATUS_IGNORE);  //N lub L
					}else if (strcmp(funkcja, "gauss")==0){
						MPI_Recv(&inbuf4[i], ma*na, MPI_DOUBLE, source, tag[2], MPI_COMM_WORLD, MPI_STATUS_IGNORE);  //N lub L
						MPI_Recv(&inbuf5[i], ma, MPI_DOUBLE, source, tag[3], MPI_COMM_WORLD, MPI_STATUS_IGNORE);  //b
					}
					if ((strcmp(funkcja, "jacobi")==0) && (rank!=0)){
						liczJacobi(ma, na, inbuf2[LEFT], inbuf3[LEFT], b, inbuf1[LEFT]);
					}else if (strcmp(funkcja, "gauss")==0 && rank!=0){
						liczGaussSeid(ma, na, inbuf2[LEFT], inbuf4[LEFT], inbuf5[LEFT], inbuf1[LEFT]);
					}
				}
			}
			if(rank==(numtasks-1)){
				printf("Wynik:\n");
				print_matrix2(ma, inbuf1[LEFT]);
				printf("\n");
			}

	}else
      		printf("Error\n");
   	MPI_Finalize();
}
void tab1(int ma, double inbuf[][ma]){
	int i, j;
	for(i=0;i<2;i++){
		for(j=0;j<ma;j++)
			inbuf[i][j]=MPI_PROC_NULL;
	}
}

//2-wymiarowy inbuf
void tab12(int ma, int na, double inbuf[][ma][na]){
	int i, j, k;
	for(i=0;i<2;i++){
		for(j=0;j<ma;j++){
			for(k=0;k<na;k++)
				inbuf[i][j][k]=MPI_PROC_NULL;
		}
	}
}


void print_matrix(int ma, int na, double A[ma][na]){
    int i, j;
    printf("[");
    for(i =0; i< ma; i++){
        for(j=0; j<na; j++)
        {
            printf("%lf ", A[i][j]);
        }
        printf("\n");
    }
    printf("]\n");
}


void print_matrix2(int ma, double A[]){
    int i;
    printf("[");
    for(i =0; i< ma; i++){
            printf("%lf ", A[i]);
    }
    printf("]\n");
}

void metodaGaussSeid(int ma, int na, double A[ma][na], double U[ma][na], double L[ma][na], double b[]){
	int i, j;
	double **D;

	//przydzial pamieci
	D = malloc(ma*sizeof(double));
	for(i=0; i< ma; i++){
		D[i] = malloc(na*sizeof(double));
	}

   // podzial na D, U,  L
   for (i=0; i<ma; i++)
      for (j=0; j<na; j++) {
         if (i < j) {
            U[i][j] = A[i][j];
         }
         else if (i > j) {
            L[i][j] = A[i][j];
         }
         else {
            D[i][j] = A[i][j];
         }
      }

   // obliczanie D^-1
   for (i=0; i<ma; i++)
      D[i][i] = 1/D[i][i];;

   // obliczenie D^-1 * b
   for (i=0; i<ma; i++)
      b[i] *= D[i][i];

   //obliczenie D^-1 * L
   for (i=0; i<ma; i++)
      for (j=0; j<i; j++)
         L[i][j] *= D[i][i];

   //Obliczenie D^-1 * U
   for (i=0; i<ma; i++)
      for (j=i+1; j<ma; j++)
         U[i][j] *= D[i][i];
}


void liczGaussSeid(int ma, int na, double U[ma][na], double L[ma][na], double b[], double C[]){
	int i, j;

	for (i=0; i<ma; i++) {
         C[i] = b[i];                       // x = D^-1*b -
         for (j=0; j<i; j++)
            C[i] -= L[i][j]*C[j];    // D^-1*L * x -
         for (j=i+1; j<ma; j++)
            C[i] -= U[i][j]*C[j];    // D^-1*U * x
    }
}
void mJacobi(int ma, int na, double A[ma][na], double M[ma][na], double *N){
	int i,j;

	// Calculate N = D^-1
   for (i=0; i<ma; i++){
      N[i] = 1/A[i][i];
   }

   // Calculate M = -D^-1 (L + U)
   for (i=0; i<ma; i++)
      for (j=0; j<ma; j++)
         if (i == j){
            M[i][j] = 0;
		 }
         else{
            M[i][j] = - (A[i][j] * N[i]);
		 }
}

void liczJacobi(int ma, int na, double M[ma][na], double *N, double b[], double C[]){
	int i, j;

    for (i=0; i<ma; i++) {
        C[i] = N[i]*b[i];
        for (j=0; j<na; j++)
			C[i] += M[i][j]*C[j];
	}
}

